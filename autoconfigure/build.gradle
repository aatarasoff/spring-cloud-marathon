apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'nebula.integtest-standalone'

dependencies {
    provided "org.springframework.boot:spring-boot-starter-web", optional
    provided "org.springframework.boot:spring-boot-starter-actuator", optional
    provided "org.springframework.boot:spring-boot-configuration-processor", optional
    provided "org.springframework.cloud:spring-cloud-commons", optional
    provided "org.springframework.cloud:spring-cloud-netflix-core", optional
    provided "org.springframework.cloud:spring-cloud-starter-ribbon", optional
    provided "org.springframework.cloud:spring-cloud-starter-feign", optional

    provided "com.mesosphere:marathon-client", optional
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'spring-cloud-marathon-autoconfigure'

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

bintray {
    user = System.properties['BINTRAY_USER']
    key = System.properties['BINTRAY_KEY']
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = 'spring-cloud-marathon-autoconfigure'
    }
}

task integrationTestsSetup(type: Exec) {
    workingDir "${rootProject.projectDir}"
    commandLine 'docker-compose', 'up', '-d'
    doLast {
        sleep 30000
    }
}

task integrationTestsDeploy(type: Exec) {
    workingDir "${rootProject.projectDir}"
    commandLine "bash", "-c", "curl -XPOST http://localhost:8080/v2/apps?force=true -v " +
            "-H \"Content-Type: application/json\" " +
            "--data-binary @test-marathon-app-manifest.json"
    doLast {
        sleep 30000
    }
}

task integrationTestsTeardown(type: Exec) {
    workingDir "${rootProject.projectDir}"
    commandLine "bash", "-c", "docker-compose stop && docker-compose rm -f"
}

integrationTestsDeploy.dependsOn(integrationTestsSetup)
integrationTest.dependsOn(integrationTestsDeploy)
integrationTest.finalizedBy(integrationTestsTeardown)
